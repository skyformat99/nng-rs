/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 25;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const NNG_MAJOR_VERSION: u32 = 1;
pub const NNG_MINOR_VERSION: u32 = 0;
pub const NNG_PATCH_VERSION: u32 = 0;
pub const NNG_RELEASE_SUFFIX: &'static [u8; 1usize] = b"\0";
pub const NNG_MAXADDRLEN: u32 = 128;
pub const NNG_DURATION_INFINITE: i32 = -1;
pub const NNG_DURATION_DEFAULT: i32 = -2;
pub const NNG_DURATION_ZERO: u32 = 0;
pub const NNG_OPT_SOCKNAME: &'static [u8; 12usize] = b"socket-name\0";
pub const NNG_OPT_RAW: &'static [u8; 4usize] = b"raw\0";
pub const NNG_OPT_PROTO: &'static [u8; 9usize] = b"protocol\0";
pub const NNG_OPT_PROTONAME: &'static [u8; 14usize] = b"protocol-name\0";
pub const NNG_OPT_PEER: &'static [u8; 5usize] = b"peer\0";
pub const NNG_OPT_PEERNAME: &'static [u8; 10usize] = b"peer-name\0";
pub const NNG_OPT_RECVBUF: &'static [u8; 12usize] = b"recv-buffer\0";
pub const NNG_OPT_SENDBUF: &'static [u8; 12usize] = b"send-buffer\0";
pub const NNG_OPT_RECVFD: &'static [u8; 8usize] = b"recv-fd\0";
pub const NNG_OPT_SENDFD: &'static [u8; 8usize] = b"send-fd\0";
pub const NNG_OPT_RECVTIMEO: &'static [u8; 13usize] = b"recv-timeout\0";
pub const NNG_OPT_SENDTIMEO: &'static [u8; 13usize] = b"send-timeout\0";
pub const NNG_OPT_LOCADDR: &'static [u8; 14usize] = b"local-address\0";
pub const NNG_OPT_REMADDR: &'static [u8; 15usize] = b"remote-address\0";
pub const NNG_OPT_URL: &'static [u8; 4usize] = b"url\0";
pub const NNG_OPT_MAXTTL: &'static [u8; 8usize] = b"ttl-max\0";
pub const NNG_OPT_RECVMAXSZ: &'static [u8; 14usize] = b"recv-size-max\0";
pub const NNG_OPT_RECONNMINT: &'static [u8; 19usize] = b"reconnect-time-min\0";
pub const NNG_OPT_RECONNMAXT: &'static [u8; 19usize] = b"reconnect-time-max\0";
pub const NNG_OPT_TLS_CONFIG: &'static [u8; 11usize] = b"tls-config\0";
pub const NNG_OPT_TLS_AUTH_MODE: &'static [u8; 13usize] = b"tls-authmode\0";
pub const NNG_OPT_TLS_CERT_KEY_FILE: &'static [u8; 18usize] = b"tls-cert-key-file\0";
pub const NNG_OPT_TLS_CA_FILE: &'static [u8; 12usize] = b"tls-ca-file\0";
pub const NNG_OPT_TLS_SERVER_NAME: &'static [u8; 16usize] = b"tls-server-name\0";
pub const NNG_OPT_TLS_VERIFIED: &'static [u8; 13usize] = b"tls-verified\0";
pub const NNG_OPT_TCP_NODELAY: &'static [u8; 12usize] = b"tcp-nodelay\0";
pub const NNG_OPT_TCP_KEEPALIVE: &'static [u8; 14usize] = b"tcp-keepalive\0";
pub const NNG_OPT_SURVEYOR_SURVEYTIME: &'static [u8; 21usize] = b"surveyor:survey-time\0";
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_ctx_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_ctx_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_ctx_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_ctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_ctx_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_ctx_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_ctx_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_ctx_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_ctx = nng_ctx_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_dialer_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_dialer_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_dialer_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_dialer_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_dialer_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_dialer_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_dialer_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_dialer_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_dialer = nng_dialer_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_listener_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_listener_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_listener_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_listener_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_listener_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_listener_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_listener_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_listener_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_listener = nng_listener_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_pipe_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_pipe_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_pipe_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_pipe_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_pipe_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_pipe_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_pipe_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_pipe_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_pipe = nng_pipe_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_socket_s {
    pub id: u32,
}
#[test]
fn bindgen_test_layout_nng_socket_s() {
    assert_eq!(
        ::std::mem::size_of::<nng_socket_s>(),
        4usize,
        concat!("Size of: ", stringify!(nng_socket_s))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_socket_s>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_socket_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_socket_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_socket_s),
            "::",
            stringify!(id)
        )
    );
}
pub type nng_socket = nng_socket_s;
pub type nng_duration = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_msg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_snapshot {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_stat {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_aio {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nng_sockaddr_inproc {
    pub sa_family: u16,
    pub sa_name: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr_inproc() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_inproc>(),
        130usize,
        concat!("Size of: ", stringify!(nng_sockaddr_inproc))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_inproc>(),
        2usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_inproc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_inproc>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_inproc),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_inproc>())).sa_name as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_inproc),
            "::",
            stringify!(sa_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nng_sockaddr_path {
    pub sa_family: u16,
    pub sa_path: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr_path() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_path>(),
        130usize,
        concat!("Size of: ", stringify!(nng_sockaddr_path))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_path>(),
        2usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_path))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_path>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_path),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_path>())).sa_path as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_path),
            "::",
            stringify!(sa_path)
        )
    );
}
pub type nng_sockaddr_ipc = nng_sockaddr_path;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_in6 {
    pub sa_family: u16,
    pub sa_port: u16,
    pub sa_addr: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_nng_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_in6>(),
        20usize,
        concat!("Size of: ", stringify!(nng_sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_in6>(),
        2usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in6>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in6),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in6>())).sa_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in6),
            "::",
            stringify!(sa_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in6>())).sa_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in6),
            "::",
            stringify!(sa_addr)
        )
    );
}
pub type nng_sockaddr_udp6 = nng_sockaddr_in6;
pub type nng_sockaddr_tcp6 = nng_sockaddr_in6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_in {
    pub sa_family: u16,
    pub sa_port: u16,
    pub sa_addr: u32,
}
#[test]
fn bindgen_test_layout_nng_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_in>(),
        8usize,
        concat!("Size of: ", stringify!(nng_sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in>())).sa_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in),
            "::",
            stringify!(sa_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_in>())).sa_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_in),
            "::",
            stringify!(sa_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_sockaddr_zt {
    pub sa_family: u16,
    pub sa_nwid: u64,
    pub sa_nodeid: u64,
    pub sa_port: u32,
}
#[test]
fn bindgen_test_layout_nng_sockaddr_zt() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr_zt>(),
        32usize,
        concat!("Size of: ", stringify!(nng_sockaddr_zt))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr_zt>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_sockaddr_zt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_nwid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_nwid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_nodeid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_nodeid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr_zt>())).sa_port as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr_zt),
            "::",
            stringify!(sa_port)
        )
    );
}
pub type nng_sockaddr_udp = nng_sockaddr_in;
pub type nng_sockaddr_tcp = nng_sockaddr_in;
#[repr(C)]
#[derive(Copy, Clone)]; 17usize ] , }#[test]
fn bindgen_test_layout_nng_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<nng_sockaddr>(),
        136usize,
        concat!("Size of: ", stringify!(nng_sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_sockaddr>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_ipc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_ipc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_inproc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_inproc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_in6 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_in6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_in as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_sockaddr>())).s_zt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_sockaddr),
            "::",
            stringify!(s_zt)
        )
    );
}
pub const nng_sockaddr_family_NNG_AF_UNSPEC: nng_sockaddr_family = 0;
pub const nng_sockaddr_family_NNG_AF_INPROC: nng_sockaddr_family = 1;
pub const nng_sockaddr_family_NNG_AF_IPC: nng_sockaddr_family = 2;
pub const nng_sockaddr_family_NNG_AF_INET: nng_sockaddr_family = 3;
pub const nng_sockaddr_family_NNG_AF_INET6: nng_sockaddr_family = 4;
pub const nng_sockaddr_family_NNG_AF_ZT: nng_sockaddr_family = 5;
pub type nng_sockaddr_family = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_iov {
    pub iov_buf: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_nng_iov() {
    assert_eq!(
        ::std::mem::size_of::<nng_iov>(),
        16usize,
        concat!("Size of: ", stringify!(nng_iov))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_iov>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_iov))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_iov>())).iov_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_iov),
            "::",
            stringify!(iov_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_iov>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_iov),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn nng_fini();
}
extern "C" {
    pub fn nng_close(arg1: nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_socket_id(arg1: nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_closeall();
}
extern "C" {
    pub fn nng_setopt(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_bool(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_int(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_ms(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_size(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_uint64(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_string(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_setopt_ptr(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_bool(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_int(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_ms(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_size(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_uint64(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_ptr(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const nng_pipe_ev_NNG_PIPE_EV_ADD_PRE: nng_pipe_ev = 0;
pub const nng_pipe_ev_NNG_PIPE_EV_ADD_POST: nng_pipe_ev = 1;
pub const nng_pipe_ev_NNG_PIPE_EV_REM_POST: nng_pipe_ev = 2;
pub const nng_pipe_ev_NNG_PIPE_EV_NUM: nng_pipe_ev = 3;
pub type nng_pipe_ev = u32;
pub type nng_pipe_cb =
    ::std::option::Option<
        unsafe extern "C" fn(arg1: nng_pipe,
                             arg2: ::std::os::raw::c_int,
                             arg3: *mut ::std::os::raw::c_void),
    >;
extern "C" {
    pub fn nng_pipe_notify(
        arg1: nng_socket,
        arg2: ::std::os::raw::c_int,
        arg3: nng_pipe_cb,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_getopt_string(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listen(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_listener,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dial(
        arg1: nng_socket,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_dialer,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_create(
        arg1: *mut nng_dialer,
        arg2: nng_socket,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_create(
        arg1: *mut nng_listener,
        arg2: nng_socket,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_start(arg1: nng_dialer, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_start(
        arg1: nng_listener,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_close(arg1: nng_dialer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_close(arg1: nng_listener) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_id(arg1: nng_dialer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_id(arg1: nng_listener) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_bool(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_int(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_ms(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_size(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_uint64(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_ptr(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_setopt_string(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_bool(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_int(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_ms(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_size(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_sockaddr(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_uint64(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_ptr(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_dialer_getopt_string(
        arg1: nng_dialer,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_bool(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_int(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_ms(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_size(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_uint64(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_ptr(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_setopt_string(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_bool(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_int(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_ms(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_size(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_sockaddr(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_uint64(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_ptr(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_listener_getopt_string(
        arg1: nng_listener,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn nng_send(
        arg1: nng_socket,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_recv(
        arg1: nng_socket,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_sendmsg(
        arg1: nng_socket,
        arg2: *mut nng_msg,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_recvmsg(
        arg1: nng_socket,
        arg2: *mut *mut nng_msg,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_send_aio(arg1: nng_socket, arg2: *mut nng_aio);
}
extern "C" {
    pub fn nng_recv_aio(arg1: nng_socket, arg2: *mut nng_aio);
}
extern "C" {
    pub fn nng_ctx_open(arg1: *mut nng_ctx, arg2: nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_close(arg1: nng_ctx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_id(arg1: nng_ctx) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_recv(arg1: nng_ctx, arg2: *mut nng_aio);
}
extern "C" {
    pub fn nng_ctx_send(arg1: nng_ctx, arg2: *mut nng_aio);
}
extern "C" {
    pub fn nng_ctx_getopt(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_getopt_bool(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_getopt_int(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_getopt_ms(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_getopt_size(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_setopt(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_setopt_bool(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_setopt_int(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_setopt_ms(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_ctx_setopt_size(
        arg1: nng_ctx,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_alloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nng_free(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn nng_strdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nng_strfree(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn nng_aio_alloc(
        arg1: *mut *mut nng_aio,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_aio_free(arg1: *mut nng_aio);
}
extern "C" {
    pub fn nng_aio_stop(arg1: *mut nng_aio);
}
extern "C" {
    pub fn nng_aio_result(arg1: *mut nng_aio) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_aio_count(arg1: *mut nng_aio) -> usize;
}
extern "C" {
    pub fn nng_aio_cancel(arg1: *mut nng_aio);
}
extern "C" {
    pub fn nng_aio_abort(arg1: *mut nng_aio, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nng_aio_wait(arg1: *mut nng_aio);
}
extern "C" {
    pub fn nng_aio_set_msg(arg1: *mut nng_aio, arg2: *mut nng_msg);
}
extern "C" {
    pub fn nng_aio_get_msg(arg1: *mut nng_aio) -> *mut nng_msg;
}
extern "C" {
    pub fn nng_aio_set_input(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_aio_get_input(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nng_aio_set_output(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_aio_get_output(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nng_aio_set_timeout(arg1: *mut nng_aio, arg2: nng_duration);
}
extern "C" {
    pub fn nng_aio_set_iov(
        arg1: *mut nng_aio,
        arg2: ::std::os::raw::c_uint,
        arg3: *const nng_iov,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_aio_finish(arg1: *mut nng_aio, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nng_sleep_aio(arg1: nng_duration, arg2: *mut nng_aio);
}
extern "C" {
    pub fn nng_msg_alloc(arg1: *mut *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_free(arg1: *mut nng_msg);
}
extern "C" {
    pub fn nng_msg_realloc(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header(arg1: *mut nng_msg) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nng_msg_header_len(arg1: *const nng_msg) -> usize;
}
extern "C" {
    pub fn nng_msg_body(arg1: *mut nng_msg) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn nng_msg_len(arg1: *const nng_msg) -> usize;
}
extern "C" {
    pub fn nng_msg_append(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_insert(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_trim(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_chop(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_append(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_insert(
        arg1: *mut nng_msg,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_trim(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_chop(arg1: *mut nng_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_append_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_insert_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_chop_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_header_trim_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_append_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_insert_u32(arg1: *mut nng_msg, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_chop_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_trim_u32(arg1: *mut nng_msg, arg2: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_dup(arg1: *mut *mut nng_msg, arg2: *const nng_msg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_msg_clear(arg1: *mut nng_msg);
}
extern "C" {
    pub fn nng_msg_header_clear(arg1: *mut nng_msg);
}
extern "C" {
    pub fn nng_msg_set_pipe(arg1: *mut nng_msg, arg2: nng_pipe);
}
extern "C" {
    pub fn nng_msg_get_pipe(arg1: *const nng_msg) -> nng_pipe;
}
extern "C" {
    pub fn nng_msg_getopt(
        arg1: *mut nng_msg,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_bool(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_int(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_ms(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_duration,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_size(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_sockaddr(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut nng_sockaddr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_uint64(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_ptr(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_getopt_string(
        arg1: nng_pipe,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_close(arg1: nng_pipe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_id(arg1: nng_pipe) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_pipe_socket(arg1: nng_pipe) -> nng_socket;
}
extern "C" {
    pub fn nng_pipe_dialer(arg1: nng_pipe) -> nng_dialer;
}
extern "C" {
    pub fn nng_pipe_listener(arg1: nng_pipe) -> nng_listener;
}
pub const nng_flag_enum_NNG_FLAG_ALLOC: nng_flag_enum = 1;
pub const nng_flag_enum_NNG_FLAG_NONBLOCK: nng_flag_enum = 2;
pub type nng_flag_enum = u32;
pub const nng_stat_type_enum_NNG_STAT_LEVEL: nng_stat_type_enum = 0;
pub const nng_stat_type_enum_NNG_STAT_COUNTER: nng_stat_type_enum = 1;
pub type nng_stat_type_enum = u32;
pub const nng_unit_enum_NNG_UNIT_NONE: nng_unit_enum = 0;
pub const nng_unit_enum_NNG_UNIT_BYTES: nng_unit_enum = 1;
pub const nng_unit_enum_NNG_UNIT_MESSAGES: nng_unit_enum = 2;
pub const nng_unit_enum_NNG_UNIT_BOOLEAN: nng_unit_enum = 3;
pub const nng_unit_enum_NNG_UNIT_MILLIS: nng_unit_enum = 4;
pub const nng_unit_enum_NNG_UNIT_EVENTS: nng_unit_enum = 5;
pub type nng_unit_enum = u32;
extern "C" {
    pub fn nng_device(arg1: nng_socket, arg2: nng_socket) -> ::std::os::raw::c_int;
}
pub const nng_errno_enum_NNG_EINTR: nng_errno_enum = 1;
pub const nng_errno_enum_NNG_ENOMEM: nng_errno_enum = 2;
pub const nng_errno_enum_NNG_EINVAL: nng_errno_enum = 3;
pub const nng_errno_enum_NNG_EBUSY: nng_errno_enum = 4;
pub const nng_errno_enum_NNG_ETIMEDOUT: nng_errno_enum = 5;
pub const nng_errno_enum_NNG_ECONNREFUSED: nng_errno_enum = 6;
pub const nng_errno_enum_NNG_ECLOSED: nng_errno_enum = 7;
pub const nng_errno_enum_NNG_EAGAIN: nng_errno_enum = 8;
pub const nng_errno_enum_NNG_ENOTSUP: nng_errno_enum = 9;
pub const nng_errno_enum_NNG_EADDRINUSE: nng_errno_enum = 10;
pub const nng_errno_enum_NNG_ESTATE: nng_errno_enum = 11;
pub const nng_errno_enum_NNG_ENOENT: nng_errno_enum = 12;
pub const nng_errno_enum_NNG_EPROTO: nng_errno_enum = 13;
pub const nng_errno_enum_NNG_EUNREACHABLE: nng_errno_enum = 14;
pub const nng_errno_enum_NNG_EADDRINVAL: nng_errno_enum = 15;
pub const nng_errno_enum_NNG_EPERM: nng_errno_enum = 16;
pub const nng_errno_enum_NNG_EMSGSIZE: nng_errno_enum = 17;
pub const nng_errno_enum_NNG_ECONNABORTED: nng_errno_enum = 18;
pub const nng_errno_enum_NNG_ECONNRESET: nng_errno_enum = 19;
pub const nng_errno_enum_NNG_ECANCELED: nng_errno_enum = 20;
pub const nng_errno_enum_NNG_ENOFILES: nng_errno_enum = 21;
pub const nng_errno_enum_NNG_ENOSPC: nng_errno_enum = 22;
pub const nng_errno_enum_NNG_EEXIST: nng_errno_enum = 23;
pub const nng_errno_enum_NNG_EREADONLY: nng_errno_enum = 24;
pub const nng_errno_enum_NNG_EWRITEONLY: nng_errno_enum = 25;
pub const nng_errno_enum_NNG_ECRYPTO: nng_errno_enum = 26;
pub const nng_errno_enum_NNG_EPEERAUTH: nng_errno_enum = 27;
pub const nng_errno_enum_NNG_ENOARG: nng_errno_enum = 28;
pub const nng_errno_enum_NNG_EAMBIGUOUS: nng_errno_enum = 29;
pub const nng_errno_enum_NNG_EBADTYPE: nng_errno_enum = 30;
pub const nng_errno_enum_NNG_EINTERNAL: nng_errno_enum = 1000;
pub const nng_errno_enum_NNG_ESYSERR: nng_errno_enum = 268435456;
pub const nng_errno_enum_NNG_ETRANERR: nng_errno_enum = 536870912;
pub type nng_errno_enum = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nng_url {
    pub u_rawurl: *mut ::std::os::raw::c_char,
    pub u_scheme: *mut ::std::os::raw::c_char,
    pub u_userinfo: *mut ::std::os::raw::c_char,
    pub u_host: *mut ::std::os::raw::c_char,
    pub u_hostname: *mut ::std::os::raw::c_char,
    pub u_port: *mut ::std::os::raw::c_char,
    pub u_path: *mut ::std::os::raw::c_char,
    pub u_query: *mut ::std::os::raw::c_char,
    pub u_fragment: *mut ::std::os::raw::c_char,
    pub u_requri: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_nng_url() {
    assert_eq!(
        ::std::mem::size_of::<nng_url>(),
        80usize,
        concat!("Size of: ", stringify!(nng_url))
    );
    assert_eq!(
        ::std::mem::align_of::<nng_url>(),
        8usize,
        concat!("Alignment of ", stringify!(nng_url))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_rawurl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_rawurl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_scheme as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_scheme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_userinfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_userinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_host as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_hostname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_hostname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_port as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_path as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_query as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_fragment as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_fragment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nng_url>())).u_requri as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(nng_url),
            "::",
            stringify!(u_requri)
        )
    );
}
extern "C" {
    pub fn nng_url_parse(
        arg1: *mut *mut nng_url,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_url_free(arg1: *mut nng_url);
}
extern "C" {
    pub fn nng_url_clone(arg1: *mut *mut nng_url, arg2: *const nng_url) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn nng_bus0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_bus0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_surveyor0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_surveyor0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_respondent0_open(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nng_respondent0_open_raw(arg1: *mut nng_socket) -> ::std::os::raw::c_int;
}
